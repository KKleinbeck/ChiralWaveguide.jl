var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Solve","page":"API","title":"Solve","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"ChiralWaveguide.solve(x)","category":"page"},{"location":"api/#CommonSolve.solve-Tuple{Any}","page":"API","title":"CommonSolve.solve","text":"solve(problem::WaveguideProblem; [Nouts], kwargs...)\n\nSolves the WaveguideProblem, using QuantumOptics.timeevolution.master_nh[_dynamic].\n\nArguments\n\nproblem: the waveguide problem\nNouts::Array{Int} (optional): specifies the dimension of the output Fock spaces\nAdditional keyword arguments are passed to QuantumOptics.jl's master equation solver, see it's documentation\n\nReturns\n\nts:    The times on which the output is determined.\nρ(t):  The density matrix at each point in time. The Hilbert space depends on the specific        problem; if unsure check out ρ[1].basis_l.\n\n\n\n\n\n","category":"method"},{"location":"api/#WaveguideProblem","page":"API","title":"WaveguideProblem","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"ChiralWaveguide.WaveguideProblem","category":"page"},{"location":"api/#ChiralWaveguide.WaveguideProblem","page":"API","title":"ChiralWaveguide.WaveguideProblem","text":"WaveguideProblem(system, [ψᵢ::WavePacket, ψ₀::Mode,] ts)\n\nDefines the waveguide problem for solve(x).\n\nArguments\n\nsystem: array of form [H, σ, ψₛ] or [H, Ls, σ, ψₛ]. H is the system Hamiltonian, Ls an array of system dissipators, σ the coupling operator of the system, and ψₛ the systems initial state.\nψᵢ (optional): the WavePacket driving the system.\nψₒ (optional): the observed mode.\nts: time domain for the simulation. Can be a number, tuple or array. If ts is a number the simulation is started at t = 0.\n\n\n\n\n\n","category":"type"},{"location":"api/#WavePackets-and-States","page":"API","title":"WavePackets & States","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"WavePacket","category":"page"},{"location":"api/#ChiralWaveguide.WavePacket","page":"API","title":"ChiralWaveguide.WavePacket","text":"WavePacket(mode::Mode, state::WavePacketState)\n\nDescribes the input wave packet. A WavePacket consists of any Mode and any WavePacketState.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"WavePacketState","category":"page"},{"location":"api/#ChiralWaveguide.WavePacketState","page":"API","title":"ChiralWaveguide.WavePacketState","text":"WavePacketState\n\nAbstract base class for all states.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"Coherent","category":"page"},{"location":"api/#ChiralWaveguide.Coherent","page":"API","title":"ChiralWaveguide.Coherent","text":"Coherent(α[, N_cutoff])\n\nDescribes a coherent state α. The autmatic choice for N_cutoff yields a normalisation of above 0.999 for α ∈ [0,10].\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"ArbitraryState","category":"page"},{"location":"api/#ChiralWaveguide.ArbitraryState","page":"API","title":"ChiralWaveguide.ArbitraryState","text":"ArbitraryState(amplitudes[, N_cutoff])\n\nCreates a state with specific amplitudes.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"DisplacedArbitraryState","category":"page"},{"location":"api/#ChiralWaveguide.DisplacedArbitraryState","page":"API","title":"ChiralWaveguide.DisplacedArbitraryState","text":"DisplacedArbitraryState(α, amplitudes[, N_cutoff])\n\nDescribes a state with specific amplitudes, which then is displaced by D(α).\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"Fock","category":"page"},{"location":"api/#ChiralWaveguide.Fock","page":"API","title":"ChiralWaveguide.Fock","text":"Fock(n[, N_cutoff])\n\nDecribes the Fock state n.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"DisplacedFock","category":"page"},{"location":"api/#ChiralWaveguide.DisplacedFock","page":"API","title":"ChiralWaveguide.DisplacedFock","text":"  Fock(n[, N_cutoff])\n\nDecribes the displaced Fock state D(α)n.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"SqueezedVacuum","category":"page"},{"location":"api/#ChiralWaveguide.SqueezedVacuum","page":"API","title":"ChiralWaveguide.SqueezedVacuum","text":"SqueezedVacuum(r, ϕ[, N_cutoff])\n\nDecribes the a squeezed state with squeezing amplitude r and squeezing angle ϕ, i.e., the state exp(ξ^* a^2 - ξ a^dagger 2)2 0 with ξ = r e^i ϕ.\n\n\n\n\n\n","category":"type"},{"location":"api/#Modes","page":"API","title":"Modes","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Mode","category":"page"},{"location":"api/#ChiralWaveguide.Mode","page":"API","title":"ChiralWaveguide.Mode","text":"Mode(modeFunction; compression = :algebraic, kwargs...)\nMode(modeFunction, gᵢ, gₒ, norm)\n\nContainer for a cavity mode.\n\nArguments\n\nmodeFunction: the wave function of the mode\ngᵢ: coupling function for an input cavity\ngₒ: coupling function for an output cavity\nnorm: square integral of the mode up to time t\n\nIf only the mode function is provided, then all other quantities are numerically determined. This is done by mapping ℝ  (-1 1) and then numerically solving the resulting integrals. The argument compression picks the map ℝ  (-1 1) and can be a Compression or the respective symbol. Allowed symbols are the keys of the ChiralWaveguide.Compressions dictionary. Additional keyword arguments will be passed to the numerical integrator.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"HardBoxMode","category":"page"},{"location":"api/#ChiralWaveguide.HardBoxMode","page":"API","title":"ChiralWaveguide.HardBoxMode","text":"HardBoxMode(; t₀ = 0.0, σ = 1.0)\n\nThe mode is a box function, i.e., the mode takes the value 1  sqrtσ for t₀  t  t₀ + σ and 0 otherwise.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"SoftBoxMode","category":"page"},{"location":"api/#ChiralWaveguide.SoftBoxMode","page":"API","title":"ChiralWaveguide.SoftBoxMode","text":"SoftBoxMode(; τ = 0.0, σ = 1.0, n::Int = 10)\n\nThe mode is an approximation to the box mode, mathrmbox(t)  frac1sqrt(2t)^2n + 1. The parameters τ and σ control the center and width respectively, n the exponent.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"SoftBoxExpMode","category":"page"},{"location":"api/#ChiralWaveguide.SoftBoxExpMode","page":"API","title":"ChiralWaveguide.SoftBoxExpMode","text":"SoftBoxExpMode(; τ = 0.0, σ = 1.0, γ = 10.0)\n\nA box mode with exponential decaying flanks, given by\n\n                   ⌜ 1                     for |t| < 1/2\nsoftBoxExp(t, γ) = |\n                   ⌞ exp(-γ(|t| - 1/2))    for |t| > 1/2\n\nThe parameters τ and σ control the center and width respectively, γ the deay rate.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"GaussMode","category":"page"},{"location":"api/#ChiralWaveguide.GaussMode","page":"API","title":"ChiralWaveguide.GaussMode","text":"GaussMode(; τ = 0.0, σ = 1.0)\n\nNumerical stable mode function & couplings of Gaussian wave packet with mean τ and variance σ.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"ExpMode","category":"page"},{"location":"api/#ChiralWaveguide.ExpMode","page":"API","title":"ChiralWaveguide.ExpMode","text":"ExpMode(; t₀ = 0.0, γ = 1.0)\n\nExponentially raises up to time t₀ or decays after t₀, depending on the sign of the rate γ. Amplitude decays with rate γ/2, so that the probability density decays with γ.\n\n\n\n\n\n","category":"function"},{"location":"api/#Systems","page":"API","title":"Systems","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"TwoLevelChain","category":"page"},{"location":"api/#ChiralWaveguide.TwoLevelChain","page":"API","title":"ChiralWaveguide.TwoLevelChain","text":"TwoLevelChain(N_atoms::Int; Γ = 0.0)\n\nCreates a chain of N_atoms two-level atoms with spontaneous decay rate Γ. The coupling rate is set to 1, but can be modified by scaling the Hamiltonian and coupling operator. Uses NLevelBasis(2) as the single atom basis.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"DissipativeLambdaChain","category":"page"},{"location":"api/#ChiralWaveguide.DissipativeLambdaChain","page":"API","title":"ChiralWaveguide.DissipativeLambdaChain","text":"DissipativeLambdaChain(N_atoms::Int; γd = 1.0, Γ = 0.0)\n\nCreates a chain of N_atoms three-level atoms with spontaneous decay rate Γ and decay rate γd into the second ground state. The coupling rate is set to 1, but can be modified by scaling the Hamiltonian and coupling operator. Uses NLevelBasis(3) as the single atom basis.\n\n\n\n\n\n","category":"function"},{"location":"api/#Compressions","page":"API","title":"Compressions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"ChiralWaveguide.Compression","category":"page"},{"location":"api/#ChiralWaveguide.Compression","page":"API","title":"ChiralWaveguide.Compression","text":"Compression(c, d, i; σ = 1.0, μ = 0.0)\n\nMaps ℝ  (-1 1).\n\nArguments\n\nc: the \"compression\", i.e., the map ℝ  (-1 1),\nd: the \"decompression\", i.e., the map (-1 1)  ℝ,\ni: the jacobian of the map, i.e., d(τ) τ,\nσ, μ: control the width and offset in the numerical integrations\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"Algebraic","category":"page"},{"location":"api/#ChiralWaveguide.Algebraic","page":"API","title":"ChiralWaveguide.Algebraic","text":"Algebraic(; σ = 1.0, μ = 0.0)\n\nMaps ℝ  (-1 1) by t  fract1 + t. Equivalent symbol is :algebraic.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"Exponential","category":"page"},{"location":"api/#ChiralWaveguide.Exponential","page":"API","title":"ChiralWaveguide.Exponential","text":"Exponential(; σ = 1.0, μ = 0.0)\n\nMaps ℝ  (-1 1) by t  mathrmtanh(t). Equivalent symbol is :exponential.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"Trigonometric","category":"page"},{"location":"api/#ChiralWaveguide.Trigonometric","page":"API","title":"ChiralWaveguide.Trigonometric","text":"Trigonometric(; σ = 1.0, μ = 0.0)\n\nMaps ℝ  (-1 1) by t  frac2π mathrmtan^-1(t). Equivalent symbol is :trigonometric.\n\n\n\n\n\n","category":"function"},{"location":"theory/#Theory","page":"Theory","title":"Theory","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"To be filled.","category":"page"},{"location":"examples/SinglePhotonScattering/#Scattering-of-a-single-photon","page":"Scattering of a single photon","title":"Scattering of a single photon","text":"","category":"section"},{"location":"examples/SinglePhotonScattering/","page":"Scattering of a single photon","title":"Scattering of a single photon","text":"In this example, we analyse the scattering of a single photon in a Gaussian mode at a single chiral two level atom. For comparison, we reconstruct the second figure from the paper from A. Kiilerich, K. Mølmer, on which this package is based. For this problem, the scatter problem can be solved analytically and the the outgoing mode function is","category":"page"},{"location":"examples/SinglePhotonScattering/","page":"Scattering of a single photon","title":"Scattering of a single photon","text":"\tpsi_mathrmout(t) propto expleft(-frac(t - τ)^22right)\n\t\t- sqrtfracπ2 expleft(- fract - τ2 + frac18 right)\n\t\t  mathrmerfcleft(frac-2(t - τ) + 12 sqrt2right)","category":"page"},{"location":"examples/SinglePhotonScattering/","page":"Scattering of a single photon","title":"Scattering of a single photon","text":"where the incoming Gauss mode has a width of sigma = 1 and it's center of mass arrives at the atom at time tau.","category":"page"},{"location":"examples/SinglePhotonScattering/","page":"Scattering of a single photon","title":"Scattering of a single photon","text":"We start the simulation by loading the necessary packages","category":"page"},{"location":"examples/SinglePhotonScattering/","page":"Scattering of a single photon","title":"Scattering of a single photon","text":"using ChiralWaveguide, Plots, SpecialFunctions # SpecialFunctions has erfc","category":"page"},{"location":"examples/SinglePhotonScattering/","page":"Scattering of a single photon","title":"Scattering of a single photon","text":"defining the incoming single photon wave packet","category":"page"},{"location":"examples/SinglePhotonScattering/","page":"Scattering of a single photon","title":"Scattering of a single photon","text":"wavepacket = WavePacket(GaussMode(τ = 4.0), Fock(1))","category":"page"},{"location":"examples/SinglePhotonScattering/","page":"Scattering of a single photon","title":"Scattering of a single photon","text":"and create the final mode we want to observe (notice the mode does not have to be normalised)","category":"page"},{"location":"examples/SinglePhotonScattering/","page":"Scattering of a single photon","title":"Scattering of a single photon","text":"function outputModeFunction(t, τ = 4.0)\n\tabs(t-τ) > 10 && return 0.0 # cutoff for numerical stability\n\treturn exp(-(t - τ)^2/2) -\n\t\t√(π/2) * exp(-(t - τ) / 2 + 1 / 8) * erfc((-2(t - τ) + 1) / (2 * √(2)))\nend\n\noutputMode = Mode(t -> outputModeFunctionFig2(t, 1.0, 4.0))","category":"page"},{"location":"examples/SinglePhotonScattering/","page":"Scattering of a single photon","title":"Scattering of a single photon","text":"Notice that we did not provide the coupling rates for the outputMode ourself but let the constructor of Mode take care of that, which numerically solves the integrals for us.","category":"page"},{"location":"examples/SinglePhotonScattering/","page":"Scattering of a single photon","title":"Scattering of a single photon","text":"We now have every constituents to define","category":"page"},{"location":"examples/SinglePhotonScattering/","page":"Scattering of a single photon","title":"Scattering of a single photon","text":"problemA = WaveguideProblem(TwoLevelChain(1), WP, outputMode, 13.0)","category":"page"},{"location":"examples/SinglePhotonScattering/","page":"Scattering of a single photon","title":"Scattering of a single photon","text":"and solve the scattering problem","category":"page"},{"location":"examples/SinglePhotonScattering/","page":"Scattering of a single photon","title":"Scattering of a single photon","text":"ts, ρs = solve(problemA)","category":"page"},{"location":"examples/SinglePhotonScattering/","page":"Scattering of a single photon","title":"Scattering of a single photon","text":"This already completes the simulation and we can now define the observables of interest. The density matrices ρs at time ts are ordinary QuantumOptics.jl operators and we can therefore utilise every tool within QuantumOptics.jl.","category":"page"},{"location":"examples/SinglePhotonScattering/","page":"Scattering of a single photon","title":"Scattering of a single photon","text":"basis  = ρs[end].basis_l\nn̂ᵢ, n̂ₒ = number(basis.bases[1]), number(basis.bases[3])\nσ⁺σ⁻   = transition(NLevelBasis(2), 2, 2)","category":"page"},{"location":"examples/SinglePhotonScattering/","page":"Scattering of a single photon","title":"Scattering of a single photon","text":"Finally, we draw the populations of the input cavity, the excited state of the atom, and the output cavity, resulting in the same figure as from the paper:","category":"page"},{"location":"examples/SinglePhotonScattering/","page":"Scattering of a single photon","title":"Scattering of a single photon","text":"plot( ts, expect(1, n̂ᵢ,   ρs) .|> real, label = \"⟨n̂_i⟩\",  line = (2, :red))\nplot!(ts, expect(2, σ⁺σ⁻, ρs) .|> real, label = \"⟨σ⁺σ⁻⟩\", line = (2, :green, :dot))\nplot!(ts, expect(3, n̂ₒ,   ρs) .|> real, label = \"⟨n̂_o⟩\",  line = (2, :blue,  :dash))\nplot!(size = (600, 200), legend = :right)","category":"page"},{"location":"examples/SinglePhotonScattering/","page":"Scattering of a single photon","title":"Scattering of a single photon","text":"(Image: Populations)","category":"page"},{"location":"examples/SinglePhotonScattering/","page":"Scattering of a single photon","title":"Scattering of a single photon","text":"","category":"page"},{"location":"examples/SinglePhotonScattering/","page":"Scattering of a single photon","title":"Scattering of a single photon","text":"Entire Script","category":"page"},{"location":"examples/SinglePhotonScattering/","page":"Scattering of a single photon","title":"Scattering of a single photon","text":"using ChiralWaveguide, Plots, SpecialFunctions # SpecialFunctions has erfc\n\nwavepacket = WavePacket(GaussMode(τ = 4.0), Fock(1))\n\nfunction outputModeFunction(t, τ)\n\tabs(t-τ) > 10 && return 0.0 # cutoff for numerical stability\n\treturn exp(-(t - τ)^2/2) -\n\t\t√(π/2) * exp(-(t - τ) / 2 + 1 / 8) * erfc((-2(t - τ) + 1) / (2 * √(2)))\nend\n\noutputMode = Mode(t -> outputModeFunction(t, 4.0))\n\nproblem = WaveguideProblem(TwoLevelChain(1), wavepacket, outputMode, 13.0)\nts, ρs = solve(problem)\n\nbasis  = ρs[end].basis_l\nn̂ᵢ, n̂ₒ = number(basis.bases[1]), number(basis.bases[3])\nσ⁺σ⁻   = transition(NLevelBasis(2), 2, 2)\n\nplot( ts, expect(1, n̂ᵢ,   ρs) .|> real, label = \"⟨n̂_i⟩\",  line = (2, :red))\nplot!(ts, expect(2, σ⁺σ⁻, ρs) .|> real, label = \"⟨σ⁺σ⁻⟩\", line = (2, :green, :dot))\nplot!(ts, expect(3, n̂ₒ,   ρs) .|> real, label = \"⟨n̂_o⟩\",  line = (2, :blue,  :dash))\nplot!(size = (600, 200), legend = :right)","category":"page"},{"location":"#Simulating-1d-chiral-quantum-systems","page":"Simulating 1d chiral quantum systems","title":"Simulating 1d chiral quantum systems","text":"","category":"section"},{"location":"","page":"Simulating 1d chiral quantum systems","title":"Simulating 1d chiral quantum systems","text":"ChiralWaveguide.jl is a simulation package for arbitrary chiral quantum systems, coupled to a continuous bosonic background, for example free photons. This package aims to deliver three promises:","category":"page"},{"location":"","page":"Simulating 1d chiral quantum systems","title":"Simulating 1d chiral quantum systems","text":"A lightweight, descriptive interface. Scattering a Gaussian Fock state on a chiral atom is no more complicated than\nproblem = WaveguideProblem(TwoLevelChain(1), WavePacket(GaussMode(), Fock(1)), 10.0)\nts, ρs = solve(problem)\nPerformance. ChiralWaveguide.jl performs suitable transformations on the Hilbert space, like the Mollow transform, to reduce the effective Hilbert space size as much as possible.\nInteroperability and a native Julia experience. ChiralWaveguide is build entirely around the QuantumOptics.jl package. In fact, getting the population of the excited state in the previous example is no more complicated than\nσ⁺σ⁻ = transition(NLevelBasis(2), 2, 2)\nexpect(2, σ⁺σ⁻, ρs)\nAdditionally, the syntax is heavily inspired by the SciML ecosystem.","category":"page"}]
}
