var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Solve","page":"API","title":"Solve","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"ChiralWaveguide.solve(x)","category":"page"},{"location":"api/#CommonSolve.solve-Tuple{Any}","page":"API","title":"CommonSolve.solve","text":"solve(problem::WaveguideProblem; [Nouts], kwargs...)\n\nSolves the WaveguideProblem, using QuantumOptics.timeevolution.master_nh[_dynamic].\n\nArguments\n\nproblem: the waveguide problem\nNouts::Array{Int} (optional): specifies the dimension of the output Fock spaces\nAdditional keyword arguments are passed to QuantumOptics.jl's master equation solver, see it's documentation\n\nReturns\n\nts:    The times on which the output is determined.\nρ(t):  The density matrix at each point in time. The Hilbert space depends on the specific        problem; if unsure check out ρ[1].basis_l.\n\n\n\n\n\n","category":"method"},{"location":"api/#WaveguideProblem","page":"API","title":"WaveguideProblem","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"ChiralWaveguide.WaveguideProblem","category":"page"},{"location":"api/#ChiralWaveguide.WaveguideProblem","page":"API","title":"ChiralWaveguide.WaveguideProblem","text":"WaveguideProblem(system, [ψᵢ::WavePacket, ψ₀::Mode,] ts)\n\nDefines the waveguide problem for solve(x).\n\nArguments\n\nsystem: array of form [H, σ, ψₛ] or [H, Ls, σ, ψₛ]. H is the system Hamiltonian, Ls an array of system dissipators, σ the coupling operator of the system, and ψₛ the systems initial state.\nψᵢ (optional): the WavePacket driving the system.\nψₒ (optional): the observed mode.\nts: time domain for the simulation. Can be a number, tuple or array. If ts is a number the simulation is started at t = 0.\n\n\n\n\n\n","category":"type"},{"location":"api/#WavePackets-and-States","page":"API","title":"WavePackets & States","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"WavePacket","category":"page"},{"location":"api/#ChiralWaveguide.WavePacket","page":"API","title":"ChiralWaveguide.WavePacket","text":"WavePacket(mode::Mode, state::WavePacketState)\n\nDescribes the input wave packet. A WavePacket consists of any Mode and any WavePacketState.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"WavePacketState","category":"page"},{"location":"api/#ChiralWaveguide.WavePacketState","page":"API","title":"ChiralWaveguide.WavePacketState","text":"WavePacketState\n\nAbstract base class for all states.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"Coherent","category":"page"},{"location":"api/#ChiralWaveguide.Coherent","page":"API","title":"ChiralWaveguide.Coherent","text":"Coherent(α[, N_cutoff])\n\nDescribes a coherent state α. The autmatic choice for N_cutoff yields a normalisation of above 0.999 for α ∈ [0,10].\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"ArbitraryState","category":"page"},{"location":"api/#ChiralWaveguide.ArbitraryState","page":"API","title":"ChiralWaveguide.ArbitraryState","text":"ArbitraryState(amplitudes[, N_cutoff])\n\nCreates a state with specific amplitudes.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"DisplacedArbitraryState","category":"page"},{"location":"api/#ChiralWaveguide.DisplacedArbitraryState","page":"API","title":"ChiralWaveguide.DisplacedArbitraryState","text":"DisplacedArbitraryState(α, amplitudes[, N_cutoff])\n\nDescribes a state with specific amplitudes, which then is displaced by D(α).\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"Fock","category":"page"},{"location":"api/#ChiralWaveguide.Fock","page":"API","title":"ChiralWaveguide.Fock","text":"Fock(n[, N_cutoff])\n\nDecribes the Fock state n.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"DisplacedFock","category":"page"},{"location":"api/#ChiralWaveguide.DisplacedFock","page":"API","title":"ChiralWaveguide.DisplacedFock","text":"  Fock(n[, N_cutoff])\n\nDecribes the displaced Fock state D(α)n.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"SqueezedVacuum","category":"page"},{"location":"api/#ChiralWaveguide.SqueezedVacuum","page":"API","title":"ChiralWaveguide.SqueezedVacuum","text":"SqueezedVacuum(r, ϕ[, N_cutoff])\n\nDecribes the a squeezed state with squeezing amplitude r and squeezing angle ϕ, i.e., the state exp(ξ^* a^2 - ξ a^dagger 2)2 0 with ξ = r e^i ϕ.\n\n\n\n\n\n","category":"type"},{"location":"api/#Modes","page":"API","title":"Modes","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Mode","category":"page"},{"location":"api/#ChiralWaveguide.Mode","page":"API","title":"ChiralWaveguide.Mode","text":"Mode(modeFunction; compression = :algebraic, kwargs...)\nMode(modeFunction, gᵢ, gₒ, norm)\n\nContainer for a cavity mode.\n\nArguments\n\nmodeFunction: the wave function of the mode\ngᵢ: coupling function for an input cavity\ngₒ: coupling function for an output cavity\nnorm: square integral of the mode up to time t\n\nIf only the mode function is provided, then all other quantities are numerically determined. This is done by mapping ℝ  (-1 1) and then numerically solving the resulting integrals. The argument compression picks the map ℝ  (-1 1) and can be a Compression or the respective symbol. Allowed symbols are the keys of the ChiralWaveguide.Compressions dictionary. Additional keyword arguments will be passed to the numerical integrator.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"HardBoxMode","category":"page"},{"location":"api/#ChiralWaveguide.HardBoxMode","page":"API","title":"ChiralWaveguide.HardBoxMode","text":"HardBoxMode(; t₀ = 0.0, σ = 1.0)\n\nThe mode is a box function, i.e., the mode takes the value 1  sqrtσ for t₀  t  t₀ + σ and 0 otherwise.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"SoftBoxMode","category":"page"},{"location":"api/#ChiralWaveguide.SoftBoxMode","page":"API","title":"ChiralWaveguide.SoftBoxMode","text":"SoftBoxMode(; τ = 0.0, σ = 1.0, n::Int = 10)\n\nThe mode is an approximation to the box mode, mathrmbox(t)  frac1sqrt(2t)^2n + 1. The parameters τ and σ control the center and width respectively, n the exponent.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"SoftBoxExpMode","category":"page"},{"location":"api/#ChiralWaveguide.SoftBoxExpMode","page":"API","title":"ChiralWaveguide.SoftBoxExpMode","text":"SoftBoxExpMode(; τ = 0.0, σ = 1.0, γ = 10.0)\n\nA box mode with exponential decaying flanks, given by\n\n                   ⌜ 1                     for |t| < 1/2\nsoftBoxExp(t, γ) = |\n                   ⌞ exp(-γ(|t| - 1/2))    for |t| > 1/2\n\nThe parameters τ and σ control the center and width respectively, γ the deay rate.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"GaussMode","category":"page"},{"location":"api/#ChiralWaveguide.GaussMode","page":"API","title":"ChiralWaveguide.GaussMode","text":"GaussMode(; τ = 0.0, σ = 1.0)\n\nNumerical stable mode function & couplings of Gaussian wave packet with mean τ and variance σ.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"ExpMode","category":"page"},{"location":"api/#ChiralWaveguide.ExpMode","page":"API","title":"ChiralWaveguide.ExpMode","text":"ExpMode(; t₀ = 0.0, γ = 1.0)\n\nExponentially raises up to time t₀ or decays after t₀, depending on the sign of the rate γ. Amplitude decays with rate γ/2, so that the probability density decays with γ.\n\n\n\n\n\n","category":"function"},{"location":"api/#Compressions","page":"API","title":"Compressions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"ChiralWaveguide.Compression","category":"page"},{"location":"api/#ChiralWaveguide.Compression","page":"API","title":"ChiralWaveguide.Compression","text":"Compression(c, d, i; σ = 1.0, μ = 0.0)\n\nMaps ℝ  (-1 1).\n\nArguments\n\nc: the \"compression\", i.e., the map ℝ  (-1 1),\nd: the \"decompression\", i.e., the map (-1 1)  ℝ,\ni: the jacobian of the map, i.e., d(τ) τ,\nσ, μ: control the width and offset in the numerical integrations\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"Algebraic","category":"page"},{"location":"api/#ChiralWaveguide.Algebraic","page":"API","title":"ChiralWaveguide.Algebraic","text":"Algebraic(; σ = 1.0, μ = 0.0)\n\nMaps ℝ  (-1 1) by t  fract1 + t. Equivalent symbol is :algebraic.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"Exponential","category":"page"},{"location":"api/#ChiralWaveguide.Exponential","page":"API","title":"ChiralWaveguide.Exponential","text":"Exponential(; σ = 1.0, μ = 0.0)\n\nMaps ℝ  (-1 1) by t  mathrmtanh(t). Equivalent symbol is :exponential.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"Trigonometric","category":"page"},{"location":"api/#ChiralWaveguide.Trigonometric","page":"API","title":"ChiralWaveguide.Trigonometric","text":"Trigonometric(; σ = 1.0, μ = 0.0)\n\nMaps ℝ  (-1 1) by t  frac2π mathrmtan^-1(t). Equivalent symbol is :trigonometric.\n\n\n\n\n\n","category":"function"},{"location":"theory/#Theory","page":"Theory","title":"Theory","text":"","category":"section"},{"location":"#Simulating-1d-chiral-quantum-systems","page":"Simulating 1d chiral quantum systems","title":"Simulating 1d chiral quantum systems","text":"","category":"section"},{"location":"","page":"Simulating 1d chiral quantum systems","title":"Simulating 1d chiral quantum systems","text":"ChiralWaveguide.jl is a simulation package for arbitrary chiral quantum systems, coupled to a continuous bosonic background, for example free photons. This package aims to deliver three promises:","category":"page"},{"location":"","page":"Simulating 1d chiral quantum systems","title":"Simulating 1d chiral quantum systems","text":"A lightweight, descriptive interface. Scattering a Gaussian Fock state on a chiral atom is no more complicated than\nproblem = WaveguideProblem(TwoLevelChain(1), WavePacket(GaussMode(), Fock(1)), 10.0)\nts, ρs = solve(problem)\nPerformance. ChiralWaveguide.jl performs suitable transformations on the Hilbert space, like the Mollow transform, to reduce the effective Hilbert space size as much as possible.\nInteroperability and a native Julia experience. ChiralWaveguide is build entirely around the QuantumOptics.jl package. In fact, getting the population of the excited state in the previous example is no more complicated than\nσ⁺σ⁻ = transition(NLevelBasis(2), 2, 2)\nexpect(2, σ⁺σ⁻, ρs)\nAdditionally, the syntax is heavily inspired by the SciML ecosystem.","category":"page"}]
}
